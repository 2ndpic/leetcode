# Áªô‰Ω† n ‰∏™‰ªªÂä°Âíå m ‰∏™Â∑•‰∫∫„ÄÇÊØè‰∏™‰ªªÂä°ÈúÄË¶Å‰∏ÄÂÆöÁöÑÂäõÈáèÂÄºÊâçËÉΩÂÆåÊàêÔºåÈúÄË¶ÅÁöÑÂäõÈáèÂÄº‰øùÂ≠òÂú®‰∏ãÊ†á‰ªé 0 ÂºÄÂßãÁöÑÊï¥Êï∞Êï∞ÁªÑ tasks ‰∏≠ÔºåÁ¨¨ i ‰∏™‰ªªÂä°ÈúÄË¶Å 
# tasks[i] ÁöÑÂäõÈáèÊâçËÉΩÂÆåÊàê„ÄÇÊØè‰∏™Â∑•‰∫∫ÁöÑÂäõÈáèÂÄº‰øùÂ≠òÂú®‰∏ãÊ†á‰ªé 0 ÂºÄÂßãÁöÑÊï¥Êï∞Êï∞ÁªÑ workers ‰∏≠ÔºåÁ¨¨ j ‰∏™Â∑•‰∫∫ÁöÑÂäõÈáèÂÄº‰∏∫ workers[j] „ÄÇÊØè‰∏™Â∑•‰∫∫Âè™ËÉΩÂÆå
# Êàê ‰∏Ä‰∏™ ‰ªªÂä°Ôºå‰∏îÂäõÈáèÂÄºÈúÄË¶Å Â§ß‰∫éÁ≠â‰∫é ËØ•‰ªªÂä°ÁöÑÂäõÈáèË¶ÅÊ±ÇÂÄºÔºàÂç≥ workers[j] >= tasks[i] Ôºâ„ÄÇ 
# 
#  Èô§Ê≠§‰ª•Â§ñÔºå‰Ω†ËøòÊúâ pills ‰∏™Á•ûÂ•áËçØ‰∏∏ÔºåÂèØ‰ª•Áªô ‰∏Ä‰∏™Â∑•‰∫∫ÁöÑÂäõÈáèÂÄº Â¢ûÂä† strength „ÄÇ‰Ω†ÂèØ‰ª•ÂÜ≥ÂÆöÁªôÂì™‰∫õÂ∑•‰∫∫‰ΩøÁî®ËçØ‰∏∏Ôºå‰ΩÜÊØè‰∏™Â∑•‰∫∫ ÊúÄÂ§ö Âè™ËÉΩ‰ΩøÁî® ‰∏Ä
# Áâá ËçØ‰∏∏„ÄÇ 
# 
#  Áªô‰Ω†‰∏ãÊ†á‰ªé 0 ÂºÄÂßãÁöÑÊï¥Êï∞Êï∞ÁªÑtasks Âíå workers ‰ª•Âèä‰∏§‰∏™Êï¥Êï∞ pills Âíå strength ÔºåËØ∑‰Ω†ËøîÂõû ÊúÄÂ§ö ÊúâÂ§öÂ∞ë‰∏™‰ªªÂä°ÂèØ‰ª•Ë¢´ÂÆåÊàê„ÄÇ 
# 
# 
#  
# 
#  Á§∫‰æã 1Ôºö 
# 
#  ËæìÂÖ•Ôºötasks = [3,2,1], workers = [0,3,3], pills = 1, strength = 1
# ËæìÂá∫Ôºö3
# Ëß£ÈáäÔºö
# Êàë‰ª¨ÂèØ‰ª•ÊåâÁÖßÂ¶Ç‰∏ãÊñπÊ°àÂÆâÊéíËçØ‰∏∏Ôºö
# - Áªô 0 Âè∑Â∑•‰∫∫ËçØ‰∏∏„ÄÇ
# - 0 Âè∑Â∑•‰∫∫ÂÆåÊàê‰ªªÂä° 2Ôºà0 + 1 >= 1Ôºâ
# - 1 Âè∑Â∑•‰∫∫ÂÆåÊàê‰ªªÂä° 1Ôºà3 >= 2Ôºâ
# - 2 Âè∑Â∑•‰∫∫ÂÆåÊàê‰ªªÂä° 0Ôºà3 >= 3Ôºâ
#  
# 
#  Á§∫‰æã 2Ôºö 
# 
#  ËæìÂÖ•Ôºötasks = [5,4], workers = [0,0,0], pills = 1, strength = 5
# ËæìÂá∫Ôºö1
# Ëß£ÈáäÔºö
# Êàë‰ª¨ÂèØ‰ª•ÊåâÁÖßÂ¶Ç‰∏ãÊñπÊ°àÂÆâÊéíËçØ‰∏∏Ôºö
# - Áªô 0 Âè∑Â∑•‰∫∫ËçØ‰∏∏„ÄÇ
# - 0 Âè∑Â∑•‰∫∫ÂÆåÊàê‰ªªÂä° 0Ôºà0 + 5 >= 5Ôºâ
#  
# 
#  Á§∫‰æã 3Ôºö 
# 
#  ËæìÂÖ•Ôºötasks = [10,15,30], workers = [0,10,10,10,10], pills = 3, strength = 10
# ËæìÂá∫Ôºö2
# Ëß£ÈáäÔºö
# Êàë‰ª¨ÂèØ‰ª•ÊåâÁÖßÂ¶Ç‰∏ãÊñπÊ°àÂÆâÊéíËçØ‰∏∏Ôºö
# - Áªô 0 Âè∑Âíå 1 Âè∑Â∑•‰∫∫ËçØ‰∏∏„ÄÇ
# - 0 Âè∑Â∑•‰∫∫ÂÆåÊàê‰ªªÂä° 0Ôºà0 + 10 >= 10Ôºâ
# - 1 Âè∑Â∑•‰∫∫ÂÆåÊàê‰ªªÂä° 1Ôºà10 + 10 >= 15Ôºâ
#  
# 
#  Á§∫‰æã 4Ôºö 
# 
#  ËæìÂÖ•Ôºötasks = [5,9,8,5,9], workers = [1,6,4,2,6], pills = 1, strength = 5
# ËæìÂá∫Ôºö3
# Ëß£ÈáäÔºö
# Êàë‰ª¨ÂèØ‰ª•ÊåâÁÖßÂ¶Ç‰∏ãÊñπÊ°àÂÆâÊéíËçØ‰∏∏Ôºö
# - Áªô 2 Âè∑Â∑•‰∫∫ËçØ‰∏∏„ÄÇ
# - 1 Âè∑Â∑•‰∫∫ÂÆåÊàê‰ªªÂä° 0Ôºà6 >= 5Ôºâ
# - 2 Âè∑Â∑•‰∫∫ÂÆåÊàê‰ªªÂä° 2Ôºà4 + 5 >= 8Ôºâ
# - 4 Âè∑Â∑•‰∫∫ÂÆåÊàê‰ªªÂä° 3Ôºà6 >= 5Ôºâ
#  
# 
#  
# 
#  ÊèêÁ§∫Ôºö 
# 
#  
#  n == tasks.length 
#  m == workers.length 
#  1 <= n, m <= 5 * 10‚Å¥ 
#  0 <= pills <= m 
#  0 <= tasks[i], workers[j], strength <= 10‚Åπ 
#  
#  Related Topics Ë¥™ÂøÉ ÈòüÂàó Êï∞ÁªÑ ‰∫åÂàÜÊü•Êâæ ÊéíÂ∫è ÂçïË∞ÉÈòüÂàó üëç 21 üëé 0

from typing import List

from sortedcontainers import SortedList
class Solution:
    def maxTaskAssign(self, tasks: List[int], workers: List[int], pills: int, strength: int) -> int:
        def check(k):
            w = SortedList(workers[-k:])
            cnt = pills
            for i in range(k - 1, -1, -1):
                if w[-1] >= tasks[i]: w.pop()
                elif cnt and (idx := w.bisect_left(tasks[i] - strength)) != len(w):
                    w.pop(idx)
                    cnt -= 1
                else: return False
            return True
        tasks.sort()
        workers.sort()
        n, m = len(tasks), len(workers)
        lo, hi = 0, min(n, m)
        while lo < hi:
            mid = (lo + hi) // 2
            if check(mid): lo = mid + 1
            else: hi = mid
        return lo if check(lo) else lo - 1
# leetcode submit region begin(Prohibit modification and deletion)
from collections import deque
class Solution:
    def maxTaskAssign(self, tasks: List[int], workers: List[int], pills: int, strength: int) -> int:
        def check(k):
            cnt = pills
            w = deque()
            j = m - 1
            for i in range(k - 1, -1, -1):
                while j >= m - k and workers[j] + strength >= tasks[i]:
                    w.appendleft(workers[j])
                    j -= 1
                if w and w[-1] >= tasks[i]: w.pop()
                elif cnt and w:
                    w.popleft()
                    cnt -= 1
                else: return False
            return True
        tasks.sort()
        workers.sort()
        n, m = len(tasks), len(workers)
        lo, hi = 0, min(n, m)
        while lo < hi:
            mid = (lo + hi) // 2
            if check(mid): lo = mid + 1
            else: hi = mid
        return lo if check(lo) else lo - 1

# leetcode submit region end(Prohibit modification and deletion)
tasks = [5,9,8,5,9]
workers = [1,6,4,2,6]
pills = 1
strength = 5
print("ÁªìÊûú", Solution().maxTaskAssign(tasks, workers, pills, strength))