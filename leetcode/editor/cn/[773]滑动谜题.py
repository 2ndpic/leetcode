# Âú®‰∏Ä‰∏™ 2 x 3 ÁöÑÊùø‰∏äÔºàboardÔºâÊúâ 5 ÂùóÁ†ñÁì¶ÔºåÁî®Êï∞Â≠ó 1~5 Êù•Ë°®Á§∫, ‰ª•Âèä‰∏ÄÂùóÁ©∫Áº∫Áî® 0 Êù•Ë°®Á§∫. 
# 
#  ‰∏ÄÊ¨°ÁßªÂä®ÂÆö‰πâ‰∏∫ÈÄâÊã© 0 ‰∏é‰∏Ä‰∏™Áõ∏ÈÇªÁöÑÊï∞Â≠óÔºà‰∏ä‰∏ãÂ∑¶Âè≥ÔºâËøõË°å‰∫§Êç¢. 
# 
#  ÊúÄÁªàÂΩìÊùø board ÁöÑÁªìÊûúÊòØ [[1,2,3],[4,5,0]] Ë∞úÊùøË¢´Ëß£ÂºÄ„ÄÇ 
# 
#  ÁªôÂá∫‰∏Ä‰∏™Ë∞úÊùøÁöÑÂàùÂßãÁä∂ÊÄÅÔºåËøîÂõûÊúÄÂ∞ëÂèØ‰ª•ÈÄöËøáÂ§öÂ∞ëÊ¨°ÁßªÂä®Ëß£ÂºÄË∞úÊùøÔºåÂ¶ÇÊûú‰∏çËÉΩËß£ÂºÄË∞úÊùøÔºåÂàôËøîÂõû -1 „ÄÇ 
# 
#  Á§∫‰æãÔºö 
# 
#  
# ËæìÂÖ•Ôºöboard = [[1,2,3],[4,0,5]]
# ËæìÂá∫Ôºö1
# Ëß£ÈáäÔºö‰∫§Êç¢ 0 Âíå 5 Ôºå1 Ê≠•ÂÆåÊàê
#  
# 
#  
# ËæìÂÖ•Ôºöboard = [[1,2,3],[5,4,0]]
# ËæìÂá∫Ôºö-1
# Ëß£ÈáäÔºöÊ≤°ÊúâÂäûÊ≥ïÂÆåÊàêË∞úÊùø
#  
# 
#  
# ËæìÂÖ•Ôºöboard = [[4,1,2],[5,0,3]]
# ËæìÂá∫Ôºö5
# Ëß£ÈáäÔºö
# ÊúÄÂ∞ëÂÆåÊàêË∞úÊùøÁöÑÊúÄÂ∞ëÁßªÂä®Ê¨°Êï∞ÊòØ 5 Ôºå
# ‰∏ÄÁßçÁßªÂä®Ë∑ØÂæÑ:
# Â∞öÊú™ÁßªÂä®: [[4,1,2],[5,0,3]]
# ÁßªÂä® 1 Ê¨°: [[4,1,2],[0,5,3]]
# ÁßªÂä® 2 Ê¨°: [[0,1,2],[4,5,3]]
# ÁßªÂä® 3 Ê¨°: [[1,0,2],[4,5,3]]
# ÁßªÂä® 4 Ê¨°: [[1,2,0],[4,5,3]]
# ÁßªÂä® 5 Ê¨°: [[1,2,3],[4,5,0]]
#  
# 
#  
# ËæìÂÖ•Ôºöboard = [[3,2,4],[1,5,0]]
# ËæìÂá∫Ôºö14
#  
# 
#  ÊèêÁ§∫Ôºö 
# 
#  
#  board ÊòØ‰∏Ä‰∏™Â¶Ç‰∏äÊâÄËø∞ÁöÑ 2 x 3 ÁöÑÊï∞ÁªÑ. 
#  board[i][j] ÊòØ‰∏Ä‰∏™ [0, 1, 2, 3, 4, 5] ÁöÑÊéíÂàó. 
#  
#  Related Topics ÂπøÂ∫¶‰ºòÂÖàÊêúÁ¥¢ Êï∞ÁªÑ Áü©Èòµ 
#  üëç 163 üëé 0

from typing import List
import collections
class Solution:
    def slidingPuzzle(self, board: List[List[int]]) -> int:
        target = "123450"
        board = "".join(str(i) for i in board[0] + board[1])
        q = collections.deque([board])
        ans = 0
        visited = {board}
        while q:
            for _ in range(len(q)):
                cur = q.popleft()
                if cur == target: return ans
                index_0 = cur.index("0")
                for d in (1, -1, 3, -3):
                    if (index_0 == 2 and d == 1) or (index_0 == 3 and d == -1): continue
                    new_0 = index_0 + d
                    if 0 <= new_0 < 6:
                        tmp = list(cur)
                        tmp[index_0], tmp[new_0] = tmp[new_0], tmp[index_0]
                        tmp = "".join(tmp)
                        if tmp not in visited:
                            q.append(tmp)
                            visited.add(tmp)
            ans += 1
        return -1
# leetcode submit region begin(Prohibit modification and deletion)
class Solution:
    def slidingPuzzle(self, board: List[List[int]]) -> int:
        """
        ÂèåÂêëBFS
        """
        def update(q, cur, other):
            state = q.popleft()
            x = state.index("0")
            for y in NEIGHBORS[x]:
                tmp = list(state)
                tmp[x], tmp[y] = tmp[y], tmp[x]
                tmp = "".join(tmp)
                if tmp in cur: continue
                if tmp in other: return cur[state] + 1 + other[tmp]
                else:
                    cur[tmp] = cur[state] + 1
                    q.append(tmp)
            return -1

        target = "123450"
        board = "".join(str(i) for i in board[0] + board[1])
        if board == target: return 0
        NEIGHBORS = ((1, 3), (0, 2, 4), (1, 5), (0, 4), (1, 3, 5), (2, 4))
        q1, q2 = collections.deque([board]), collections.deque([target])
        m1, m2 = {board: 0}, {target: 0}
        while q1 and q2:
            if len(q1) <= len(q2):
                t = update(q1, m1, m2)
            else:
                t = update(q2, m2, m1)
            if t != -1: return t
        return -1
# leetcode submit region end(Prohibit modification and deletion)
board = [[1,2,3],[4,0,5]]
# board = [[1,2,3],[5,4,0]]
# board = [[4,1,2],[5,0,3]]
# board = [[3,2,4],[1,5,0]]
print(Solution().slidingPuzzle(board))