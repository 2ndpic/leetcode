class Node:
    def __init__(self, value):
        self.value = value
        self.next = None

class Solution:
    def predictPartyVictory(self, senate: str) -> str:
        if len(set(senate)) == 1:
            return "Radiant" if senate[0] == "R" else "Dire"

        cls2num = {"D":0, "R":1}
        d_head, r_head = Node(None), Node(None)
        camp = [d_head, r_head]

        for index, cls in enumerate(senate):
            type_num = cls2num[cls]
            camp[type_num].next = Node(index)
            camp[type_num] = camp[type_num].next
        camp[0], camp[1] = d_head, r_head

        while True:
            # 新一轮
            d, r = d_head.next, r_head.next
            while d or r:
                # 遍历这一轮
                if r is None:
                    r_head.next = r_head.next.next
                    d = d.next
                elif d is None:
                    d_head.next = d_head.next.next
                    r = r.next
                elif d.value < r.value:
                    r_head.next = r_head.next.next # r被刀
                    d = d.next                     #下一个d
                    r = r_head.next
                else:
                    d_head.next = d_head.next.next # d被刀
                    r = r.next                     # 下一个r
                    d = d_head.next

                if d_head.next is None:
                    return "Radiant"
                if r_head.next is None:
                    return "Dire"



# total_testcases:81
# total_correct:63
# input_formatted:"DRRDRDRDRDDRDRDR"
# expected_output:"Radiant"
# code_output:"Dire"
